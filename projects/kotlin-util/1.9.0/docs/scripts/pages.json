[{"name":"abstract fun asIterable(): Iterable<T>","description":"it.czerwinski.kotlin.util.Option.asIterable","location":"kotlin-util/it.czerwinski.kotlin.util/-option/as-iterable.html","searchKeys":["asIterable","abstract fun asIterable(): Iterable<T>","it.czerwinski.kotlin.util.Option.asIterable"]},{"name":"abstract fun asSequence(): Sequence<T>","description":"it.czerwinski.kotlin.util.Option.asSequence","location":"kotlin-util/it.czerwinski.kotlin.util/-option/as-sequence.html","searchKeys":["asSequence","abstract fun asSequence(): Sequence<T>","it.czerwinski.kotlin.util.Option.asSequence"]},{"name":"abstract fun get(): T","description":"it.czerwinski.kotlin.util.Option.get","location":"kotlin-util/it.czerwinski.kotlin.util/-option/get.html","searchKeys":["get","abstract fun get(): T","it.czerwinski.kotlin.util.Option.get"]},{"name":"abstract fun get(): T","description":"it.czerwinski.kotlin.util.Try.get","location":"kotlin-util/it.czerwinski.kotlin.util/-try/get.html","searchKeys":["get","abstract fun get(): T","it.czerwinski.kotlin.util.Try.get"]},{"name":"abstract fun getOrNull(): T?","description":"it.czerwinski.kotlin.util.Option.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-option/get-or-null.html","searchKeys":["getOrNull","abstract fun getOrNull(): T?","it.czerwinski.kotlin.util.Option.getOrNull"]},{"name":"abstract fun getOrNull(): T?","description":"it.czerwinski.kotlin.util.Try.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-try/get-or-null.html","searchKeys":["getOrNull","abstract fun getOrNull(): T?","it.czerwinski.kotlin.util.Try.getOrNull"]},{"name":"abstract fun iterator(): Iterator<T>","description":"it.czerwinski.kotlin.util.Option.iterator","location":"kotlin-util/it.czerwinski.kotlin.util/-option/iterator.html","searchKeys":["iterator","abstract fun iterator(): Iterator<T>","it.czerwinski.kotlin.util.Option.iterator"]},{"name":"abstract fun swap(): Either<R, L>","description":"it.czerwinski.kotlin.util.Either.swap","location":"kotlin-util/it.czerwinski.kotlin.util/-either/swap.html","searchKeys":["swap","abstract fun swap(): Either<R, L>","it.czerwinski.kotlin.util.Either.swap"]},{"name":"abstract fun toEither(): Either<Throwable, T>","description":"it.czerwinski.kotlin.util.Try.toEither","location":"kotlin-util/it.czerwinski.kotlin.util/-try/to-either.html","searchKeys":["toEither","abstract fun toEither(): Either<Throwable, T>","it.czerwinski.kotlin.util.Try.toEither"]},{"name":"abstract fun toList(): List<T>","description":"it.czerwinski.kotlin.util.Option.toList","location":"kotlin-util/it.czerwinski.kotlin.util/-option/to-list.html","searchKeys":["toList","abstract fun toList(): List<T>","it.czerwinski.kotlin.util.Option.toList"]},{"name":"abstract fun toOption(): Option<T>","description":"it.czerwinski.kotlin.util.Try.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-try/to-option.html","searchKeys":["toOption","abstract fun toOption(): Option<T>","it.czerwinski.kotlin.util.Try.toOption"]},{"name":"abstract operator fun contains(element: Any): Boolean","description":"it.czerwinski.kotlin.util.Either.contains","location":"kotlin-util/it.czerwinski.kotlin.util/-either/contains.html","searchKeys":["contains","abstract operator fun contains(element: Any): Boolean","it.czerwinski.kotlin.util.Either.contains"]},{"name":"abstract val failed: Try<Throwable>","description":"it.czerwinski.kotlin.util.Try.failed","location":"kotlin-util/it.czerwinski.kotlin.util/-try/failed.html","searchKeys":["failed","abstract val failed: Try<Throwable>","it.czerwinski.kotlin.util.Try.failed"]},{"name":"abstract val isEmpty: Boolean","description":"it.czerwinski.kotlin.util.Option.isEmpty","location":"kotlin-util/it.czerwinski.kotlin.util/-option/is-empty.html","searchKeys":["isEmpty","abstract val isEmpty: Boolean","it.czerwinski.kotlin.util.Option.isEmpty"]},{"name":"abstract val isFailure: Boolean","description":"it.czerwinski.kotlin.util.Try.isFailure","location":"kotlin-util/it.czerwinski.kotlin.util/-try/is-failure.html","searchKeys":["isFailure","abstract val isFailure: Boolean","it.czerwinski.kotlin.util.Try.isFailure"]},{"name":"abstract val isLeft: Boolean","description":"it.czerwinski.kotlin.util.Either.isLeft","location":"kotlin-util/it.czerwinski.kotlin.util/-either/is-left.html","searchKeys":["isLeft","abstract val isLeft: Boolean","it.czerwinski.kotlin.util.Either.isLeft"]},{"name":"abstract val isRight: Boolean","description":"it.czerwinski.kotlin.util.Either.isRight","location":"kotlin-util/it.czerwinski.kotlin.util/-either/is-right.html","searchKeys":["isRight","abstract val isRight: Boolean","it.czerwinski.kotlin.util.Either.isRight"]},{"name":"abstract val isSuccess: Boolean","description":"it.czerwinski.kotlin.util.Try.isSuccess","location":"kotlin-util/it.czerwinski.kotlin.util/-try/is-success.html","searchKeys":["isSuccess","abstract val isSuccess: Boolean","it.czerwinski.kotlin.util.Try.isSuccess"]},{"name":"class SingletonIterator<T>(element: T) : Iterator<T> ","description":"it.czerwinski.kotlin.collections.SingletonIterator","location":"kotlin-util/it.czerwinski.kotlin.collections/-singleton-iterator/index.html","searchKeys":["SingletonIterator","class SingletonIterator<T>(element: T) : Iterator<T> ","it.czerwinski.kotlin.collections.SingletonIterator"]},{"name":"constructor(either: Either<L, R>)","description":"it.czerwinski.kotlin.util.LeftProjection.LeftProjection","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/-left-projection.html","searchKeys":["LeftProjection","constructor(either: Either<L, R>)","it.czerwinski.kotlin.util.LeftProjection.LeftProjection"]},{"name":"constructor(either: Either<L, R>)","description":"it.czerwinski.kotlin.util.RightProjection.RightProjection","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/-right-projection.html","searchKeys":["RightProjection","constructor(either: Either<L, R>)","it.czerwinski.kotlin.util.RightProjection.RightProjection"]},{"name":"constructor(element: T)","description":"it.czerwinski.kotlin.collections.SingletonIterator.SingletonIterator","location":"kotlin-util/it.czerwinski.kotlin.collections/-singleton-iterator/-singleton-iterator.html","searchKeys":["SingletonIterator","constructor(element: T)","it.czerwinski.kotlin.collections.SingletonIterator.SingletonIterator"]},{"name":"constructor(exception: Throwable)","description":"it.czerwinski.kotlin.util.Failure.Failure","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/-failure.html","searchKeys":["Failure","constructor(exception: Throwable)","it.czerwinski.kotlin.util.Failure.Failure"]},{"name":"constructor(value: L)","description":"it.czerwinski.kotlin.util.Left.Left","location":"kotlin-util/it.czerwinski.kotlin.util/-left/-left.html","searchKeys":["Left","constructor(value: L)","it.czerwinski.kotlin.util.Left.Left"]},{"name":"constructor(value: R)","description":"it.czerwinski.kotlin.util.Right.Right","location":"kotlin-util/it.czerwinski.kotlin.util/-right/-right.html","searchKeys":["Right","constructor(value: R)","it.czerwinski.kotlin.util.Right.Right"]},{"name":"constructor(value: T)","description":"it.czerwinski.kotlin.util.Some.Some","location":"kotlin-util/it.czerwinski.kotlin.util/-some/-some.html","searchKeys":["Some","constructor(value: T)","it.czerwinski.kotlin.util.Some.Some"]},{"name":"constructor(value: T)","description":"it.czerwinski.kotlin.util.Success.Success","location":"kotlin-util/it.czerwinski.kotlin.util/-success/-success.html","searchKeys":["Success","constructor(value: T)","it.czerwinski.kotlin.util.Success.Success"]},{"name":"data class Failure(val exception: Throwable) : Try<Nothing> ","description":"it.czerwinski.kotlin.util.Failure","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/index.html","searchKeys":["Failure","data class Failure(val exception: Throwable) : Try<Nothing> ","it.czerwinski.kotlin.util.Failure"]},{"name":"data class Left<out L>(val value: L) : Either<L, Nothing> ","description":"it.czerwinski.kotlin.util.Left","location":"kotlin-util/it.czerwinski.kotlin.util/-left/index.html","searchKeys":["Left","data class Left<out L>(val value: L) : Either<L, Nothing> ","it.czerwinski.kotlin.util.Left"]},{"name":"data class LeftProjection<out L, out R>(val either: Either<L, R>)","description":"it.czerwinski.kotlin.util.LeftProjection","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/index.html","searchKeys":["LeftProjection","data class LeftProjection<out L, out R>(val either: Either<L, R>)","it.czerwinski.kotlin.util.LeftProjection"]},{"name":"data class Right<out R>(val value: R) : Either<Nothing, R> ","description":"it.czerwinski.kotlin.util.Right","location":"kotlin-util/it.czerwinski.kotlin.util/-right/index.html","searchKeys":["Right","data class Right<out R>(val value: R) : Either<Nothing, R> ","it.czerwinski.kotlin.util.Right"]},{"name":"data class RightProjection<out L, out R>(val either: Either<L, R>)","description":"it.czerwinski.kotlin.util.RightProjection","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/index.html","searchKeys":["RightProjection","data class RightProjection<out L, out R>(val either: Either<L, R>)","it.czerwinski.kotlin.util.RightProjection"]},{"name":"data class Some<T>(val value: T) : Option<T> ","description":"it.czerwinski.kotlin.util.Some","location":"kotlin-util/it.czerwinski.kotlin.util/-some/index.html","searchKeys":["Some","data class Some<T>(val value: T) : Option<T> ","it.czerwinski.kotlin.util.Some"]},{"name":"data class Success<out T>(val value: T) : Try<T> ","description":"it.czerwinski.kotlin.util.Success","location":"kotlin-util/it.czerwinski.kotlin.util/-success/index.html","searchKeys":["Success","data class Success<out T>(val value: T) : Try<T> ","it.czerwinski.kotlin.util.Success"]},{"name":"data object None : Option<Nothing> ","description":"it.czerwinski.kotlin.util.None","location":"kotlin-util/it.czerwinski.kotlin.util/-none/index.html","searchKeys":["None","data object None : Option<Nothing> ","it.czerwinski.kotlin.util.None"]},{"name":"expect object NonFatal","description":"it.czerwinski.kotlin.util.control.NonFatal","location":"kotlin-util/it.czerwinski.kotlin.util.control/-non-fatal/index.html","searchKeys":["NonFatal","expect object NonFatal","it.czerwinski.kotlin.util.control.NonFatal"]},{"name":"expect operator fun invoke(exception: Throwable): Boolean","description":"it.czerwinski.kotlin.util.control.NonFatal.invoke","location":"kotlin-util/it.czerwinski.kotlin.util.control/-non-fatal/invoke.html","searchKeys":["invoke","expect operator fun invoke(exception: Throwable): Boolean","it.czerwinski.kotlin.util.control.NonFatal.invoke"]},{"name":"fun <A, B, C> Option<Triple<A, B, C>>.unzip(): Triple<Option<A>, Option<B>, Option<C>>","description":"it.czerwinski.kotlin.util.unzip","location":"kotlin-util/it.czerwinski.kotlin.util/unzip.html","searchKeys":["unzip","fun <A, B, C> Option<Triple<A, B, C>>.unzip(): Triple<Option<A>, Option<B>, Option<C>>","it.czerwinski.kotlin.util.unzip"]},{"name":"fun <A, B> Option<Pair<A, B>>.unzip(): Pair<Option<A>, Option<B>>","description":"it.czerwinski.kotlin.util.unzip","location":"kotlin-util/it.czerwinski.kotlin.util/unzip.html","searchKeys":["unzip","fun <A, B> Option<Pair<A, B>>.unzip(): Pair<Option<A>, Option<B>>","it.czerwinski.kotlin.util.unzip"]},{"name":"fun <L, R> Either<Either<L, R>, R>.joinLeft(): Either<L, R>","description":"it.czerwinski.kotlin.util.joinLeft","location":"kotlin-util/it.czerwinski.kotlin.util/join-left.html","searchKeys":["joinLeft","fun <L, R> Either<Either<L, R>, R>.joinLeft(): Either<L, R>","it.czerwinski.kotlin.util.joinLeft"]},{"name":"fun <L, R> Either<L, Either<L, R>>.joinRight(): Either<L, R>","description":"it.czerwinski.kotlin.util.joinRight","location":"kotlin-util/it.czerwinski.kotlin.util/join-right.html","searchKeys":["joinRight","fun <L, R> Either<L, Either<L, R>>.joinRight(): Either<L, R>","it.czerwinski.kotlin.util.joinRight"]},{"name":"fun <L, R> Either<L, R?>.filterNotNull(): Either<L, R>?","description":"it.czerwinski.kotlin.util.filterNotNull","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null.html","searchKeys":["filterNotNull","fun <L, R> Either<L, R?>.filterNotNull(): Either<L, R>?","it.czerwinski.kotlin.util.filterNotNull"]},{"name":"fun <L, R> Either<L, R?>.filterNotNullToOption(): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.filterNotNullToOption","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null-to-option.html","searchKeys":["filterNotNullToOption","fun <L, R> Either<L, R?>.filterNotNullToOption(): Option<Either<L, R>>","it.czerwinski.kotlin.util.filterNotNullToOption"]},{"name":"fun <L, R> LeftProjection<L?, R>.filterNotNull(): Either<L, R>?","description":"it.czerwinski.kotlin.util.filterNotNull","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null.html","searchKeys":["filterNotNull","fun <L, R> LeftProjection<L?, R>.filterNotNull(): Either<L, R>?","it.czerwinski.kotlin.util.filterNotNull"]},{"name":"fun <L, R> LeftProjection<L?, R>.filterNotNullToOption(): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.filterNotNullToOption","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null-to-option.html","searchKeys":["filterNotNullToOption","fun <L, R> LeftProjection<L?, R>.filterNotNullToOption(): Option<Either<L, R>>","it.czerwinski.kotlin.util.filterNotNullToOption"]},{"name":"fun <L, R> RightProjection<L, R?>.filterNotNull(): Either<L, R>?","description":"it.czerwinski.kotlin.util.filterNotNull","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null.html","searchKeys":["filterNotNull","fun <L, R> RightProjection<L, R?>.filterNotNull(): Either<L, R>?","it.czerwinski.kotlin.util.filterNotNull"]},{"name":"fun <L, R> RightProjection<L, R?>.filterNotNullToOption(): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.filterNotNullToOption","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null-to-option.html","searchKeys":["filterNotNullToOption","fun <L, R> RightProjection<L, R?>.filterNotNullToOption(): Option<Either<L, R>>","it.czerwinski.kotlin.util.filterNotNullToOption"]},{"name":"fun <T> Either<T, T>.merge(): T","description":"it.czerwinski.kotlin.util.merge","location":"kotlin-util/it.czerwinski.kotlin.util/merge.html","searchKeys":["merge","fun <T> Either<T, T>.merge(): T","it.czerwinski.kotlin.util.merge"]},{"name":"fun <T> Iterable<Option<T>>.flatten(): List<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Iterable<Option<T>>.flatten(): List<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> Option<Iterable<T>>.flatten(): List<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Option<Iterable<T>>.flatten(): List<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> Option<Option<T>>.flatten(): Option<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Option<Option<T>>.flatten(): Option<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> Option<Try<T>>.evert(): Try<Option<T>>","description":"it.czerwinski.kotlin.util.evert","location":"kotlin-util/it.czerwinski.kotlin.util/evert.html","searchKeys":["evert","fun <T> Option<Try<T>>.evert(): Try<Option<T>>","it.czerwinski.kotlin.util.evert"]},{"name":"fun <T> Option<Try<T>>.flatten(): Option<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Option<Try<T>>.flatten(): Option<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> T?.asOption(): Option<T>","description":"it.czerwinski.kotlin.util.asOption","location":"kotlin-util/it.czerwinski.kotlin.util/as-option.html","searchKeys":["asOption","fun <T> T?.asOption(): Option<T>","it.czerwinski.kotlin.util.asOption"]},{"name":"fun <T> Try<Option<T>>.evert(): Option<Try<T>>","description":"it.czerwinski.kotlin.util.evert","location":"kotlin-util/it.czerwinski.kotlin.util/evert.html","searchKeys":["evert","fun <T> Try<Option<T>>.evert(): Option<Try<T>>","it.czerwinski.kotlin.util.evert"]},{"name":"fun <T> Try<Option<T>>.flatten(): Option<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Try<Option<T>>.flatten(): Option<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> Try<T?>.filterNotNull(): Try<T>","description":"it.czerwinski.kotlin.util.filterNotNull","location":"kotlin-util/it.czerwinski.kotlin.util/filter-not-null.html","searchKeys":["filterNotNull","fun <T> Try<T?>.filterNotNull(): Try<T>","it.czerwinski.kotlin.util.filterNotNull"]},{"name":"fun <T> Try<Try<T>>.flatten(): Try<T>","description":"it.czerwinski.kotlin.util.flatten","location":"kotlin-util/it.czerwinski.kotlin.util/flatten.html","searchKeys":["flatten","fun <T> Try<Try<T>>.flatten(): Try<T>","it.czerwinski.kotlin.util.flatten"]},{"name":"fun <T> empty(): Option<T>","description":"it.czerwinski.kotlin.util.Option.Companion.empty","location":"kotlin-util/it.czerwinski.kotlin.util/-option/-companion/empty.html","searchKeys":["empty","fun <T> empty(): Option<T>","it.czerwinski.kotlin.util.Option.Companion.empty"]},{"name":"fun get(): L","description":"it.czerwinski.kotlin.util.LeftProjection.get","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/get.html","searchKeys":["get","fun get(): L","it.czerwinski.kotlin.util.LeftProjection.get"]},{"name":"fun get(): R","description":"it.czerwinski.kotlin.util.Either.get","location":"kotlin-util/it.czerwinski.kotlin.util/-either/get.html","searchKeys":["get","fun get(): R","it.czerwinski.kotlin.util.Either.get"]},{"name":"fun get(): R","description":"it.czerwinski.kotlin.util.RightProjection.get","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/get.html","searchKeys":["get","fun get(): R","it.czerwinski.kotlin.util.RightProjection.get"]},{"name":"fun getOrNull(): L?","description":"it.czerwinski.kotlin.util.LeftProjection.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): L?","it.czerwinski.kotlin.util.LeftProjection.getOrNull"]},{"name":"fun getOrNull(): R?","description":"it.czerwinski.kotlin.util.Either.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-either/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): R?","it.czerwinski.kotlin.util.Either.getOrNull"]},{"name":"fun getOrNull(): R?","description":"it.czerwinski.kotlin.util.RightProjection.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): R?","it.czerwinski.kotlin.util.RightProjection.getOrNull"]},{"name":"fun toOption(): Option<L>","description":"it.czerwinski.kotlin.util.LeftProjection.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/to-option.html","searchKeys":["toOption","fun toOption(): Option<L>","it.czerwinski.kotlin.util.LeftProjection.toOption"]},{"name":"fun toOption(): Option<R>","description":"it.czerwinski.kotlin.util.Either.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-either/to-option.html","searchKeys":["toOption","fun toOption(): Option<R>","it.czerwinski.kotlin.util.Either.toOption"]},{"name":"fun toOption(): Option<R>","description":"it.czerwinski.kotlin.util.RightProjection.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/to-option.html","searchKeys":["toOption","fun toOption(): Option<R>","it.czerwinski.kotlin.util.RightProjection.toOption"]},{"name":"infix fun <R> zip(other: Option<R>): Option<Pair<T, R>>","description":"it.czerwinski.kotlin.util.Option.zip","location":"kotlin-util/it.czerwinski.kotlin.util/-option/zip.html","searchKeys":["zip","infix fun <R> zip(other: Option<R>): Option<Pair<T, R>>","it.czerwinski.kotlin.util.Option.zip"]},{"name":"infix fun <R> zip(other: Try<R>): Try<Pair<T, R>>","description":"it.czerwinski.kotlin.util.Try.zip","location":"kotlin-util/it.czerwinski.kotlin.util/-try/zip.html","searchKeys":["zip","infix fun <R> zip(other: Try<R>): Try<Pair<T, R>>","it.czerwinski.kotlin.util.Try.zip"]},{"name":"inline fun <L, R, T> Either<L, R>.flatMap(transform: (R) -> Either<L, T>): Either<L, T>","description":"it.czerwinski.kotlin.util.flatMap","location":"kotlin-util/it.czerwinski.kotlin.util/flat-map.html","searchKeys":["flatMap","inline fun <L, R, T> Either<L, R>.flatMap(transform: (R) -> Either<L, T>): Either<L, T>","it.czerwinski.kotlin.util.flatMap"]},{"name":"inline fun <L, R, T> LeftProjection<L, R>.flatMap(transform: (L) -> Either<T, R>): Either<T, R>","description":"it.czerwinski.kotlin.util.flatMap","location":"kotlin-util/it.czerwinski.kotlin.util/flat-map.html","searchKeys":["flatMap","inline fun <L, R, T> LeftProjection<L, R>.flatMap(transform: (L) -> Either<T, R>): Either<T, R>","it.czerwinski.kotlin.util.flatMap"]},{"name":"inline fun <L, R, T> RightProjection<L, R>.flatMap(transform: (R) -> Either<L, T>): Either<L, T>","description":"it.czerwinski.kotlin.util.flatMap","location":"kotlin-util/it.czerwinski.kotlin.util/flat-map.html","searchKeys":["flatMap","inline fun <L, R, T> RightProjection<L, R>.flatMap(transform: (R) -> Either<L, T>): Either<L, T>","it.czerwinski.kotlin.util.flatMap"]},{"name":"inline fun <L, R> Either<L, R>.filterOrElse(predicate: (R) -> Boolean, zero: () -> L): Either<L, R>","description":"it.czerwinski.kotlin.util.filterOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/filter-or-else.html","searchKeys":["filterOrElse","inline fun <L, R> Either<L, R>.filterOrElse(predicate: (R) -> Boolean, zero: () -> L): Either<L, R>","it.czerwinski.kotlin.util.filterOrElse"]},{"name":"inline fun <L, R> Either<L, R>.getOrElse(default: () -> R): R","description":"it.czerwinski.kotlin.util.getOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/get-or-else.html","searchKeys":["getOrElse","inline fun <L, R> Either<L, R>.getOrElse(default: () -> R): R","it.czerwinski.kotlin.util.getOrElse"]},{"name":"inline fun <L, R> LeftProjection<L, R>.filterOrElse(predicate: (L) -> Boolean, zero: () -> R): Either<L, R>","description":"it.czerwinski.kotlin.util.filterOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/filter-or-else.html","searchKeys":["filterOrElse","inline fun <L, R> LeftProjection<L, R>.filterOrElse(predicate: (L) -> Boolean, zero: () -> R): Either<L, R>","it.czerwinski.kotlin.util.filterOrElse"]},{"name":"inline fun <L, R> LeftProjection<L, R>.getOrElse(default: () -> L): L","description":"it.czerwinski.kotlin.util.getOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/get-or-else.html","searchKeys":["getOrElse","inline fun <L, R> LeftProjection<L, R>.getOrElse(default: () -> L): L","it.czerwinski.kotlin.util.getOrElse"]},{"name":"inline fun <L, R> RightProjection<L, R>.filterOrElse(predicate: (R) -> Boolean, zero: () -> L): Either<L, R>","description":"it.czerwinski.kotlin.util.filterOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/filter-or-else.html","searchKeys":["filterOrElse","inline fun <L, R> RightProjection<L, R>.filterOrElse(predicate: (R) -> Boolean, zero: () -> L): Either<L, R>","it.czerwinski.kotlin.util.filterOrElse"]},{"name":"inline fun <L, R> RightProjection<L, R>.getOrElse(default: () -> R): R","description":"it.czerwinski.kotlin.util.getOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/get-or-else.html","searchKeys":["getOrElse","inline fun <L, R> RightProjection<L, R>.getOrElse(default: () -> R): R","it.czerwinski.kotlin.util.getOrElse"]},{"name":"inline fun <L> toRight(left: () -> L): Either<L, T>","description":"it.czerwinski.kotlin.util.Option.toRight","location":"kotlin-util/it.czerwinski.kotlin.util/-option/to-right.html","searchKeys":["toRight","inline fun <L> toRight(left: () -> L): Either<L, T>","it.czerwinski.kotlin.util.Option.toRight"]},{"name":"inline fun <R> filterIsInstance(): Option<R>","description":"it.czerwinski.kotlin.util.Option.filterIsInstance","location":"kotlin-util/it.czerwinski.kotlin.util/-option/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <R> filterIsInstance(): Option<R>","it.czerwinski.kotlin.util.Option.filterIsInstance"]},{"name":"inline fun <R> filterIsInstance(): Try<R>","description":"it.czerwinski.kotlin.util.Try.filterIsInstance","location":"kotlin-util/it.czerwinski.kotlin.util/-try/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <R> filterIsInstance(): Try<R>","it.czerwinski.kotlin.util.Try.filterIsInstance"]},{"name":"inline fun <R> flatMap(transform: (T) -> Option<R>): Option<R>","description":"it.czerwinski.kotlin.util.Option.flatMap","location":"kotlin-util/it.czerwinski.kotlin.util/-option/flat-map.html","searchKeys":["flatMap","inline fun <R> flatMap(transform: (T) -> Option<R>): Option<R>","it.czerwinski.kotlin.util.Option.flatMap"]},{"name":"inline fun <R> flatMap(transform: (T) -> Try<R>): Try<R>","description":"it.czerwinski.kotlin.util.Try.flatMap","location":"kotlin-util/it.czerwinski.kotlin.util/-try/flat-map.html","searchKeys":["flatMap","inline fun <R> flatMap(transform: (T) -> Try<R>): Try<R>","it.czerwinski.kotlin.util.Try.flatMap"]},{"name":"inline fun <R> fold(default: () -> R, transform: (T) -> R): R","description":"it.czerwinski.kotlin.util.Option.fold","location":"kotlin-util/it.czerwinski.kotlin.util/-option/fold.html","searchKeys":["fold","inline fun <R> fold(default: () -> R, transform: (T) -> R): R","it.czerwinski.kotlin.util.Option.fold"]},{"name":"inline fun <R> fold(default: R, transform: (T) -> R): R","description":"it.czerwinski.kotlin.util.Option.fold","location":"kotlin-util/it.czerwinski.kotlin.util/-option/fold.html","searchKeys":["fold","inline fun <R> fold(default: R, transform: (T) -> R): R","it.czerwinski.kotlin.util.Option.fold"]},{"name":"inline fun <R> fold(successTransform: (T) -> R, failureTransform: (Throwable) -> R): R","description":"it.czerwinski.kotlin.util.Try.fold","location":"kotlin-util/it.czerwinski.kotlin.util/-try/fold.html","searchKeys":["fold","inline fun <R> fold(successTransform: (T) -> R, failureTransform: (Throwable) -> R): R","it.czerwinski.kotlin.util.Try.fold"]},{"name":"inline fun <R> map(transform: (T) -> R): Option<R>","description":"it.czerwinski.kotlin.util.Option.map","location":"kotlin-util/it.czerwinski.kotlin.util/-option/map.html","searchKeys":["map","inline fun <R> map(transform: (T) -> R): Option<R>","it.czerwinski.kotlin.util.Option.map"]},{"name":"inline fun <R> map(transform: (T) -> R): Try<R>","description":"it.czerwinski.kotlin.util.Try.map","location":"kotlin-util/it.czerwinski.kotlin.util/-try/map.html","searchKeys":["map","inline fun <R> map(transform: (T) -> R): Try<R>","it.czerwinski.kotlin.util.Try.map"]},{"name":"inline fun <R> toLeft(right: () -> R): Either<T, R>","description":"it.czerwinski.kotlin.util.Option.toLeft","location":"kotlin-util/it.czerwinski.kotlin.util/-option/to-left.html","searchKeys":["toLeft","inline fun <R> toLeft(right: () -> R): Either<T, R>","it.czerwinski.kotlin.util.Option.toLeft"]},{"name":"inline fun <R> transform(successTransform: (T) -> Try<R>, failureTransform: (Throwable) -> Try<R>): Try<R>","description":"it.czerwinski.kotlin.util.Try.transform","location":"kotlin-util/it.czerwinski.kotlin.util/-try/transform.html","searchKeys":["transform","inline fun <R> transform(successTransform: (T) -> Try<R>, failureTransform: (Throwable) -> Try<R>): Try<R>","it.czerwinski.kotlin.util.Try.transform"]},{"name":"inline fun <T1, R> zip(other: Option<T1>, transform: (T, T1) -> R): Option<R>","description":"it.czerwinski.kotlin.util.Option.zip","location":"kotlin-util/it.czerwinski.kotlin.util/-option/zip.html","searchKeys":["zip","inline fun <T1, R> zip(other: Option<T1>, transform: (T, T1) -> R): Option<R>","it.czerwinski.kotlin.util.Option.zip"]},{"name":"inline fun <T1, R> zip(other: Try<T1>, transform: (T, T1) -> R): Try<R>","description":"it.czerwinski.kotlin.util.Try.zip","location":"kotlin-util/it.czerwinski.kotlin.util/-try/zip.html","searchKeys":["zip","inline fun <T1, R> zip(other: Try<T1>, transform: (T, T1) -> R): Try<R>","it.czerwinski.kotlin.util.Try.zip"]},{"name":"inline fun <T> Option<T>.getOrElse(default: () -> T): T","description":"it.czerwinski.kotlin.util.getOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/get-or-else.html","searchKeys":["getOrElse","inline fun <T> Option<T>.getOrElse(default: () -> T): T","it.czerwinski.kotlin.util.getOrElse"]},{"name":"inline fun <T> Option<T>.orElse(default: () -> Option<T>): Option<T>","description":"it.czerwinski.kotlin.util.orElse","location":"kotlin-util/it.czerwinski.kotlin.util/or-else.html","searchKeys":["orElse","inline fun <T> Option<T>.orElse(default: () -> Option<T>): Option<T>","it.czerwinski.kotlin.util.orElse"]},{"name":"inline fun <T> Try<T>.getOrElse(default: () -> T): T","description":"it.czerwinski.kotlin.util.getOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/get-or-else.html","searchKeys":["getOrElse","inline fun <T> Try<T>.getOrElse(default: () -> T): T","it.czerwinski.kotlin.util.getOrElse"]},{"name":"inline fun <T> Try<T>.orElse(default: () -> Try<T>): Try<T>","description":"it.czerwinski.kotlin.util.orElse","location":"kotlin-util/it.czerwinski.kotlin.util/or-else.html","searchKeys":["orElse","inline fun <T> Try<T>.orElse(default: () -> Try<T>): Try<T>","it.czerwinski.kotlin.util.orElse"]},{"name":"inline fun <T> Try<T>.recover(rescue: (Throwable) -> T): Try<T>","description":"it.czerwinski.kotlin.util.recover","location":"kotlin-util/it.czerwinski.kotlin.util/recover.html","searchKeys":["recover","inline fun <T> Try<T>.recover(rescue: (Throwable) -> T): Try<T>","it.czerwinski.kotlin.util.recover"]},{"name":"inline fun <T> Try<T>.recoverWith(rescue: (Throwable) -> Try<T>): Try<T>","description":"it.czerwinski.kotlin.util.recoverWith","location":"kotlin-util/it.czerwinski.kotlin.util/recover-with.html","searchKeys":["recoverWith","inline fun <T> Try<T>.recoverWith(rescue: (Throwable) -> Try<T>): Try<T>","it.czerwinski.kotlin.util.recoverWith"]},{"name":"inline fun <T> filterIsInstance(): Either<L, T>?","description":"it.czerwinski.kotlin.util.Either.filterIsInstance","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <T> filterIsInstance(): Either<L, T>?","it.czerwinski.kotlin.util.Either.filterIsInstance"]},{"name":"inline fun <T> filterIsInstance(): Either<L, T>?","description":"it.czerwinski.kotlin.util.RightProjection.filterIsInstance","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <T> filterIsInstance(): Either<L, T>?","it.czerwinski.kotlin.util.RightProjection.filterIsInstance"]},{"name":"inline fun <T> filterIsInstance(): Either<T, R>?","description":"it.czerwinski.kotlin.util.LeftProjection.filterIsInstance","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <T> filterIsInstance(): Either<T, R>?","it.czerwinski.kotlin.util.LeftProjection.filterIsInstance"]},{"name":"inline fun <T> filterIsInstanceToOption(): Option<Either<L, T>>","description":"it.czerwinski.kotlin.util.Either.filterIsInstanceToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter-is-instance-to-option.html","searchKeys":["filterIsInstanceToOption","inline fun <T> filterIsInstanceToOption(): Option<Either<L, T>>","it.czerwinski.kotlin.util.Either.filterIsInstanceToOption"]},{"name":"inline fun <T> filterIsInstanceToOption(): Option<Either<L, T>>","description":"it.czerwinski.kotlin.util.RightProjection.filterIsInstanceToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter-is-instance-to-option.html","searchKeys":["filterIsInstanceToOption","inline fun <T> filterIsInstanceToOption(): Option<Either<L, T>>","it.czerwinski.kotlin.util.RightProjection.filterIsInstanceToOption"]},{"name":"inline fun <T> filterIsInstanceToOption(): Option<Either<T, R>>","description":"it.czerwinski.kotlin.util.LeftProjection.filterIsInstanceToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter-is-instance-to-option.html","searchKeys":["filterIsInstanceToOption","inline fun <T> filterIsInstanceToOption(): Option<Either<T, R>>","it.czerwinski.kotlin.util.LeftProjection.filterIsInstanceToOption"]},{"name":"inline fun <T> fold(leftTransform: (L) -> T, rightTransform: (R) -> T): T","description":"it.czerwinski.kotlin.util.Either.fold","location":"kotlin-util/it.czerwinski.kotlin.util/-either/fold.html","searchKeys":["fold","inline fun <T> fold(leftTransform: (L) -> T, rightTransform: (R) -> T): T","it.czerwinski.kotlin.util.Either.fold"]},{"name":"inline fun <T> map(transform: (L) -> T): Either<T, R>","description":"it.czerwinski.kotlin.util.LeftProjection.map","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/map.html","searchKeys":["map","inline fun <T> map(transform: (L) -> T): Either<T, R>","it.czerwinski.kotlin.util.LeftProjection.map"]},{"name":"inline fun <T> map(transform: (R) -> T): Either<L, T>","description":"it.czerwinski.kotlin.util.Either.map","location":"kotlin-util/it.czerwinski.kotlin.util/-either/map.html","searchKeys":["map","inline fun <T> map(transform: (R) -> T): Either<L, T>","it.czerwinski.kotlin.util.Either.map"]},{"name":"inline fun <T> map(transform: (R) -> T): Either<L, T>","description":"it.czerwinski.kotlin.util.RightProjection.map","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/map.html","searchKeys":["map","inline fun <T> map(transform: (R) -> T): Either<L, T>","it.czerwinski.kotlin.util.RightProjection.map"]},{"name":"inline fun all(predicate: (L) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.LeftProjection.all","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/all.html","searchKeys":["all","inline fun all(predicate: (L) -> Boolean): Boolean","it.czerwinski.kotlin.util.LeftProjection.all"]},{"name":"inline fun all(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Either.all","location":"kotlin-util/it.czerwinski.kotlin.util/-either/all.html","searchKeys":["all","inline fun all(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.Either.all"]},{"name":"inline fun all(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.RightProjection.all","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/all.html","searchKeys":["all","inline fun all(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.RightProjection.all"]},{"name":"inline fun all(predicate: (T) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Option.all","location":"kotlin-util/it.czerwinski.kotlin.util/-option/all.html","searchKeys":["all","inline fun all(predicate: (T) -> Boolean): Boolean","it.czerwinski.kotlin.util.Option.all"]},{"name":"inline fun any(predicate: (L) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.LeftProjection.any","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/any.html","searchKeys":["any","inline fun any(predicate: (L) -> Boolean): Boolean","it.czerwinski.kotlin.util.LeftProjection.any"]},{"name":"inline fun any(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Either.any","location":"kotlin-util/it.czerwinski.kotlin.util/-either/any.html","searchKeys":["any","inline fun any(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.Either.any"]},{"name":"inline fun any(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.RightProjection.any","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/any.html","searchKeys":["any","inline fun any(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.RightProjection.any"]},{"name":"inline fun any(predicate: (T) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Option.any","location":"kotlin-util/it.czerwinski.kotlin.util/-option/any.html","searchKeys":["any","inline fun any(predicate: (T) -> Boolean): Boolean","it.czerwinski.kotlin.util.Option.any"]},{"name":"inline fun filter(predicate: (L) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.LeftProjection.filter","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter.html","searchKeys":["filter","inline fun filter(predicate: (L) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.LeftProjection.filter"]},{"name":"inline fun filter(predicate: (R) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.Either.filter","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter.html","searchKeys":["filter","inline fun filter(predicate: (R) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.Either.filter"]},{"name":"inline fun filter(predicate: (R) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.RightProjection.filter","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter.html","searchKeys":["filter","inline fun filter(predicate: (R) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.RightProjection.filter"]},{"name":"inline fun filter(predicate: (T) -> Boolean): Option<T>","description":"it.czerwinski.kotlin.util.Option.filter","location":"kotlin-util/it.czerwinski.kotlin.util/-option/filter.html","searchKeys":["filter","inline fun filter(predicate: (T) -> Boolean): Option<T>","it.czerwinski.kotlin.util.Option.filter"]},{"name":"inline fun filter(predicate: (T) -> Boolean): Try<T>","description":"it.czerwinski.kotlin.util.Try.filter","location":"kotlin-util/it.czerwinski.kotlin.util/-try/filter.html","searchKeys":["filter","inline fun filter(predicate: (T) -> Boolean): Try<T>","it.czerwinski.kotlin.util.Try.filter"]},{"name":"inline fun filterNot(predicate: (L) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.LeftProjection.filterNot","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter-not.html","searchKeys":["filterNot","inline fun filterNot(predicate: (L) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.LeftProjection.filterNot"]},{"name":"inline fun filterNot(predicate: (R) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.Either.filterNot","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter-not.html","searchKeys":["filterNot","inline fun filterNot(predicate: (R) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.Either.filterNot"]},{"name":"inline fun filterNot(predicate: (R) -> Boolean): Either<L, R>?","description":"it.czerwinski.kotlin.util.RightProjection.filterNot","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter-not.html","searchKeys":["filterNot","inline fun filterNot(predicate: (R) -> Boolean): Either<L, R>?","it.czerwinski.kotlin.util.RightProjection.filterNot"]},{"name":"inline fun filterNot(predicate: (T) -> Boolean): Option<T>","description":"it.czerwinski.kotlin.util.Option.filterNot","location":"kotlin-util/it.czerwinski.kotlin.util/-option/filter-not.html","searchKeys":["filterNot","inline fun filterNot(predicate: (T) -> Boolean): Option<T>","it.czerwinski.kotlin.util.Option.filterNot"]},{"name":"inline fun filterNot(predicate: (T) -> Boolean): Try<T>","description":"it.czerwinski.kotlin.util.Try.filterNot","location":"kotlin-util/it.czerwinski.kotlin.util/-try/filter-not.html","searchKeys":["filterNot","inline fun filterNot(predicate: (T) -> Boolean): Try<T>","it.czerwinski.kotlin.util.Try.filterNot"]},{"name":"inline fun filterNotToOption(predicate: (L) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.LeftProjection.filterNotToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter-not-to-option.html","searchKeys":["filterNotToOption","inline fun filterNotToOption(predicate: (L) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.LeftProjection.filterNotToOption"]},{"name":"inline fun filterNotToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.Either.filterNotToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter-not-to-option.html","searchKeys":["filterNotToOption","inline fun filterNotToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.Either.filterNotToOption"]},{"name":"inline fun filterNotToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.RightProjection.filterNotToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter-not-to-option.html","searchKeys":["filterNotToOption","inline fun filterNotToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.RightProjection.filterNotToOption"]},{"name":"inline fun filterOrElse(predicate: (T) -> Boolean, throwable: (T) -> Throwable): Try<T>","description":"it.czerwinski.kotlin.util.Try.filterOrElse","location":"kotlin-util/it.czerwinski.kotlin.util/-try/filter-or-else.html","searchKeys":["filterOrElse","inline fun filterOrElse(predicate: (T) -> Boolean, throwable: (T) -> Throwable): Try<T>","it.czerwinski.kotlin.util.Try.filterOrElse"]},{"name":"inline fun filterToOption(predicate: (L) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.LeftProjection.filterToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/filter-to-option.html","searchKeys":["filterToOption","inline fun filterToOption(predicate: (L) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.LeftProjection.filterToOption"]},{"name":"inline fun filterToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.Either.filterToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-either/filter-to-option.html","searchKeys":["filterToOption","inline fun filterToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.Either.filterToOption"]},{"name":"inline fun filterToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","description":"it.czerwinski.kotlin.util.RightProjection.filterToOption","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/filter-to-option.html","searchKeys":["filterToOption","inline fun filterToOption(predicate: (R) -> Boolean): Option<Either<L, R>>","it.czerwinski.kotlin.util.RightProjection.filterToOption"]},{"name":"inline fun forEach(action: (L) -> Unit)","description":"it.czerwinski.kotlin.util.LeftProjection.forEach","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/for-each.html","searchKeys":["forEach","inline fun forEach(action: (L) -> Unit)","it.czerwinski.kotlin.util.LeftProjection.forEach"]},{"name":"inline fun forEach(action: (R) -> Unit)","description":"it.czerwinski.kotlin.util.Either.forEach","location":"kotlin-util/it.czerwinski.kotlin.util/-either/for-each.html","searchKeys":["forEach","inline fun forEach(action: (R) -> Unit)","it.czerwinski.kotlin.util.Either.forEach"]},{"name":"inline fun forEach(action: (R) -> Unit)","description":"it.czerwinski.kotlin.util.RightProjection.forEach","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/for-each.html","searchKeys":["forEach","inline fun forEach(action: (R) -> Unit)","it.czerwinski.kotlin.util.RightProjection.forEach"]},{"name":"inline fun forEach(action: (T) -> Unit)","description":"it.czerwinski.kotlin.util.Option.forEach","location":"kotlin-util/it.czerwinski.kotlin.util/-option/for-each.html","searchKeys":["forEach","inline fun forEach(action: (T) -> Unit)","it.czerwinski.kotlin.util.Option.forEach"]},{"name":"inline fun forEach(action: (T) -> Unit)","description":"it.czerwinski.kotlin.util.Try.forEach","location":"kotlin-util/it.czerwinski.kotlin.util/-try/for-each.html","searchKeys":["forEach","inline fun forEach(action: (T) -> Unit)","it.czerwinski.kotlin.util.Try.forEach"]},{"name":"inline fun none(predicate: (L) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.LeftProjection.none","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/none.html","searchKeys":["none","inline fun none(predicate: (L) -> Boolean): Boolean","it.czerwinski.kotlin.util.LeftProjection.none"]},{"name":"inline fun none(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Either.none","location":"kotlin-util/it.czerwinski.kotlin.util/-either/none.html","searchKeys":["none","inline fun none(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.Either.none"]},{"name":"inline fun none(predicate: (R) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.RightProjection.none","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/none.html","searchKeys":["none","inline fun none(predicate: (R) -> Boolean): Boolean","it.czerwinski.kotlin.util.RightProjection.none"]},{"name":"inline fun none(predicate: (T) -> Boolean): Boolean","description":"it.czerwinski.kotlin.util.Option.none","location":"kotlin-util/it.czerwinski.kotlin.util/-option/none.html","searchKeys":["none","inline fun none(predicate: (T) -> Boolean): Boolean","it.czerwinski.kotlin.util.Option.none"]},{"name":"inline operator fun <T> invoke(callable: () -> T): Try<T>","description":"it.czerwinski.kotlin.util.Try.Companion.invoke","location":"kotlin-util/it.czerwinski.kotlin.util/-try/-companion/invoke.html","searchKeys":["invoke","inline operator fun <T> invoke(callable: () -> T): Try<T>","it.czerwinski.kotlin.util.Try.Companion.invoke"]},{"name":"object Companion","description":"it.czerwinski.kotlin.util.Option.Companion","location":"kotlin-util/it.czerwinski.kotlin.util/-option/-companion/index.html","searchKeys":["Companion","object Companion","it.czerwinski.kotlin.util.Option.Companion"]},{"name":"object Companion","description":"it.czerwinski.kotlin.util.Try.Companion","location":"kotlin-util/it.czerwinski.kotlin.util/-try/-companion/index.html","searchKeys":["Companion","object Companion","it.czerwinski.kotlin.util.Try.Companion"]},{"name":"object EmptyIterator : Iterator<Nothing> ","description":"it.czerwinski.kotlin.collections.EmptyIterator","location":"kotlin-util/it.czerwinski.kotlin.collections/-empty-iterator/index.html","searchKeys":["EmptyIterator","object EmptyIterator : Iterator<Nothing> ","it.czerwinski.kotlin.collections.EmptyIterator"]},{"name":"open operator override fun contains(element: Any): Boolean","description":"it.czerwinski.kotlin.util.Left.contains","location":"kotlin-util/it.czerwinski.kotlin.util/-left/contains.html","searchKeys":["contains","open operator override fun contains(element: Any): Boolean","it.czerwinski.kotlin.util.Left.contains"]},{"name":"open operator override fun contains(element: Any): Boolean","description":"it.czerwinski.kotlin.util.Right.contains","location":"kotlin-util/it.czerwinski.kotlin.util/-right/contains.html","searchKeys":["contains","open operator override fun contains(element: Any): Boolean","it.czerwinski.kotlin.util.Right.contains"]},{"name":"open operator override fun hasNext(): Boolean","description":"it.czerwinski.kotlin.collections.EmptyIterator.hasNext","location":"kotlin-util/it.czerwinski.kotlin.collections/-empty-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","it.czerwinski.kotlin.collections.EmptyIterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"it.czerwinski.kotlin.collections.SingletonIterator.hasNext","location":"kotlin-util/it.czerwinski.kotlin.collections/-singleton-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","it.czerwinski.kotlin.collections.SingletonIterator.hasNext"]},{"name":"open operator override fun next(): Nothing","description":"it.czerwinski.kotlin.collections.EmptyIterator.next","location":"kotlin-util/it.czerwinski.kotlin.collections/-empty-iterator/next.html","searchKeys":["next","open operator override fun next(): Nothing","it.czerwinski.kotlin.collections.EmptyIterator.next"]},{"name":"open operator override fun next(): T","description":"it.czerwinski.kotlin.collections.SingletonIterator.next","location":"kotlin-util/it.czerwinski.kotlin.collections/-singleton-iterator/next.html","searchKeys":["next","open operator override fun next(): T","it.czerwinski.kotlin.collections.SingletonIterator.next"]},{"name":"open override fun asIterable(): Iterable<Nothing>","description":"it.czerwinski.kotlin.util.None.asIterable","location":"kotlin-util/it.czerwinski.kotlin.util/-none/as-iterable.html","searchKeys":["asIterable","open override fun asIterable(): Iterable<Nothing>","it.czerwinski.kotlin.util.None.asIterable"]},{"name":"open override fun asIterable(): Iterable<T>","description":"it.czerwinski.kotlin.util.Some.asIterable","location":"kotlin-util/it.czerwinski.kotlin.util/-some/as-iterable.html","searchKeys":["asIterable","open override fun asIterable(): Iterable<T>","it.czerwinski.kotlin.util.Some.asIterable"]},{"name":"open override fun asSequence(): Sequence<Nothing>","description":"it.czerwinski.kotlin.util.None.asSequence","location":"kotlin-util/it.czerwinski.kotlin.util/-none/as-sequence.html","searchKeys":["asSequence","open override fun asSequence(): Sequence<Nothing>","it.czerwinski.kotlin.util.None.asSequence"]},{"name":"open override fun asSequence(): Sequence<T>","description":"it.czerwinski.kotlin.util.Some.asSequence","location":"kotlin-util/it.czerwinski.kotlin.util/-some/as-sequence.html","searchKeys":["asSequence","open override fun asSequence(): Sequence<T>","it.czerwinski.kotlin.util.Some.asSequence"]},{"name":"open override fun get(): Nothing","description":"it.czerwinski.kotlin.util.Failure.get","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/get.html","searchKeys":["get","open override fun get(): Nothing","it.czerwinski.kotlin.util.Failure.get"]},{"name":"open override fun get(): Nothing","description":"it.czerwinski.kotlin.util.None.get","location":"kotlin-util/it.czerwinski.kotlin.util/-none/get.html","searchKeys":["get","open override fun get(): Nothing","it.czerwinski.kotlin.util.None.get"]},{"name":"open override fun get(): T","description":"it.czerwinski.kotlin.util.Some.get","location":"kotlin-util/it.czerwinski.kotlin.util/-some/get.html","searchKeys":["get","open override fun get(): T","it.czerwinski.kotlin.util.Some.get"]},{"name":"open override fun get(): T","description":"it.czerwinski.kotlin.util.Success.get","location":"kotlin-util/it.czerwinski.kotlin.util/-success/get.html","searchKeys":["get","open override fun get(): T","it.czerwinski.kotlin.util.Success.get"]},{"name":"open override fun getOrNull(): Nothing?","description":"it.czerwinski.kotlin.util.Failure.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/get-or-null.html","searchKeys":["getOrNull","open override fun getOrNull(): Nothing?","it.czerwinski.kotlin.util.Failure.getOrNull"]},{"name":"open override fun getOrNull(): Nothing?","description":"it.czerwinski.kotlin.util.None.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-none/get-or-null.html","searchKeys":["getOrNull","open override fun getOrNull(): Nothing?","it.czerwinski.kotlin.util.None.getOrNull"]},{"name":"open override fun getOrNull(): T?","description":"it.czerwinski.kotlin.util.Some.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-some/get-or-null.html","searchKeys":["getOrNull","open override fun getOrNull(): T?","it.czerwinski.kotlin.util.Some.getOrNull"]},{"name":"open override fun getOrNull(): T?","description":"it.czerwinski.kotlin.util.Success.getOrNull","location":"kotlin-util/it.czerwinski.kotlin.util/-success/get-or-null.html","searchKeys":["getOrNull","open override fun getOrNull(): T?","it.czerwinski.kotlin.util.Success.getOrNull"]},{"name":"open override fun iterator(): Iterator<Nothing>","description":"it.czerwinski.kotlin.util.None.iterator","location":"kotlin-util/it.czerwinski.kotlin.util/-none/iterator.html","searchKeys":["iterator","open override fun iterator(): Iterator<Nothing>","it.czerwinski.kotlin.util.None.iterator"]},{"name":"open override fun iterator(): Iterator<T>","description":"it.czerwinski.kotlin.util.Some.iterator","location":"kotlin-util/it.czerwinski.kotlin.util/-some/iterator.html","searchKeys":["iterator","open override fun iterator(): Iterator<T>","it.czerwinski.kotlin.util.Some.iterator"]},{"name":"open override fun swap(): Either<Nothing, L>","description":"it.czerwinski.kotlin.util.Left.swap","location":"kotlin-util/it.czerwinski.kotlin.util/-left/swap.html","searchKeys":["swap","open override fun swap(): Either<Nothing, L>","it.czerwinski.kotlin.util.Left.swap"]},{"name":"open override fun swap(): Either<R, Nothing>","description":"it.czerwinski.kotlin.util.Right.swap","location":"kotlin-util/it.czerwinski.kotlin.util/-right/swap.html","searchKeys":["swap","open override fun swap(): Either<R, Nothing>","it.czerwinski.kotlin.util.Right.swap"]},{"name":"open override fun toEither(): Either<Throwable, Nothing>","description":"it.czerwinski.kotlin.util.Failure.toEither","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/to-either.html","searchKeys":["toEither","open override fun toEither(): Either<Throwable, Nothing>","it.czerwinski.kotlin.util.Failure.toEither"]},{"name":"open override fun toEither(): Either<Throwable, T>","description":"it.czerwinski.kotlin.util.Success.toEither","location":"kotlin-util/it.czerwinski.kotlin.util/-success/to-either.html","searchKeys":["toEither","open override fun toEither(): Either<Throwable, T>","it.czerwinski.kotlin.util.Success.toEither"]},{"name":"open override fun toList(): List<Nothing>","description":"it.czerwinski.kotlin.util.None.toList","location":"kotlin-util/it.czerwinski.kotlin.util/-none/to-list.html","searchKeys":["toList","open override fun toList(): List<Nothing>","it.czerwinski.kotlin.util.None.toList"]},{"name":"open override fun toList(): List<T>","description":"it.czerwinski.kotlin.util.Some.toList","location":"kotlin-util/it.czerwinski.kotlin.util/-some/to-list.html","searchKeys":["toList","open override fun toList(): List<T>","it.czerwinski.kotlin.util.Some.toList"]},{"name":"open override fun toOption(): Option<Nothing>","description":"it.czerwinski.kotlin.util.Failure.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/to-option.html","searchKeys":["toOption","open override fun toOption(): Option<Nothing>","it.czerwinski.kotlin.util.Failure.toOption"]},{"name":"open override fun toOption(): Option<T>","description":"it.czerwinski.kotlin.util.Success.toOption","location":"kotlin-util/it.czerwinski.kotlin.util/-success/to-option.html","searchKeys":["toOption","open override fun toOption(): Option<T>","it.czerwinski.kotlin.util.Success.toOption"]},{"name":"open override val failed: Try<Throwable>","description":"it.czerwinski.kotlin.util.Failure.failed","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/failed.html","searchKeys":["failed","open override val failed: Try<Throwable>","it.czerwinski.kotlin.util.Failure.failed"]},{"name":"open override val failed: Try<Throwable>","description":"it.czerwinski.kotlin.util.Success.failed","location":"kotlin-util/it.czerwinski.kotlin.util/-success/failed.html","searchKeys":["failed","open override val failed: Try<Throwable>","it.czerwinski.kotlin.util.Success.failed"]},{"name":"open override val isEmpty: Boolean = false","description":"it.czerwinski.kotlin.util.Some.isEmpty","location":"kotlin-util/it.czerwinski.kotlin.util/-some/is-empty.html","searchKeys":["isEmpty","open override val isEmpty: Boolean = false","it.czerwinski.kotlin.util.Some.isEmpty"]},{"name":"open override val isEmpty: Boolean = true","description":"it.czerwinski.kotlin.util.None.isEmpty","location":"kotlin-util/it.czerwinski.kotlin.util/-none/is-empty.html","searchKeys":["isEmpty","open override val isEmpty: Boolean = true","it.czerwinski.kotlin.util.None.isEmpty"]},{"name":"open override val isFailure: Boolean","description":"it.czerwinski.kotlin.util.Failure.isFailure","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/is-failure.html","searchKeys":["isFailure","open override val isFailure: Boolean","it.czerwinski.kotlin.util.Failure.isFailure"]},{"name":"open override val isFailure: Boolean","description":"it.czerwinski.kotlin.util.Success.isFailure","location":"kotlin-util/it.czerwinski.kotlin.util/-success/is-failure.html","searchKeys":["isFailure","open override val isFailure: Boolean","it.czerwinski.kotlin.util.Success.isFailure"]},{"name":"open override val isLeft: Boolean","description":"it.czerwinski.kotlin.util.Left.isLeft","location":"kotlin-util/it.czerwinski.kotlin.util/-left/is-left.html","searchKeys":["isLeft","open override val isLeft: Boolean","it.czerwinski.kotlin.util.Left.isLeft"]},{"name":"open override val isLeft: Boolean","description":"it.czerwinski.kotlin.util.Right.isLeft","location":"kotlin-util/it.czerwinski.kotlin.util/-right/is-left.html","searchKeys":["isLeft","open override val isLeft: Boolean","it.czerwinski.kotlin.util.Right.isLeft"]},{"name":"open override val isRight: Boolean","description":"it.czerwinski.kotlin.util.Left.isRight","location":"kotlin-util/it.czerwinski.kotlin.util/-left/is-right.html","searchKeys":["isRight","open override val isRight: Boolean","it.czerwinski.kotlin.util.Left.isRight"]},{"name":"open override val isRight: Boolean","description":"it.czerwinski.kotlin.util.Right.isRight","location":"kotlin-util/it.czerwinski.kotlin.util/-right/is-right.html","searchKeys":["isRight","open override val isRight: Boolean","it.czerwinski.kotlin.util.Right.isRight"]},{"name":"open override val isSuccess: Boolean","description":"it.czerwinski.kotlin.util.Failure.isSuccess","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/is-success.html","searchKeys":["isSuccess","open override val isSuccess: Boolean","it.czerwinski.kotlin.util.Failure.isSuccess"]},{"name":"open override val isSuccess: Boolean","description":"it.czerwinski.kotlin.util.Success.isSuccess","location":"kotlin-util/it.czerwinski.kotlin.util/-success/is-success.html","searchKeys":["isSuccess","open override val isSuccess: Boolean","it.czerwinski.kotlin.util.Success.isSuccess"]},{"name":"operator fun <T> Option<T>.contains(element: T): Boolean","description":"it.czerwinski.kotlin.util.contains","location":"kotlin-util/it.czerwinski.kotlin.util/contains.html","searchKeys":["contains","operator fun <T> Option<T>.contains(element: T): Boolean","it.czerwinski.kotlin.util.contains"]},{"name":"operator fun <T> invoke(value: T?): Option<T>","description":"it.czerwinski.kotlin.util.Option.Companion.invoke","location":"kotlin-util/it.czerwinski.kotlin.util/-option/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(value: T?): Option<T>","it.czerwinski.kotlin.util.Option.Companion.invoke"]},{"name":"sealed class Either<out L, out R>","description":"it.czerwinski.kotlin.util.Either","location":"kotlin-util/it.czerwinski.kotlin.util/-either/index.html","searchKeys":["Either","sealed class Either<out L, out R>","it.czerwinski.kotlin.util.Either"]},{"name":"sealed class Option<out T>","description":"it.czerwinski.kotlin.util.Option","location":"kotlin-util/it.czerwinski.kotlin.util/-option/index.html","searchKeys":["Option","sealed class Option<out T>","it.czerwinski.kotlin.util.Option"]},{"name":"sealed class Try<out T>","description":"it.czerwinski.kotlin.util.Try","location":"kotlin-util/it.czerwinski.kotlin.util/-try/index.html","searchKeys":["Try","sealed class Try<out T>","it.czerwinski.kotlin.util.Try"]},{"name":"val either: Either<L, R>","description":"it.czerwinski.kotlin.util.LeftProjection.either","location":"kotlin-util/it.czerwinski.kotlin.util/-left-projection/either.html","searchKeys":["either","val either: Either<L, R>","it.czerwinski.kotlin.util.LeftProjection.either"]},{"name":"val either: Either<L, R>","description":"it.czerwinski.kotlin.util.RightProjection.either","location":"kotlin-util/it.czerwinski.kotlin.util/-right-projection/either.html","searchKeys":["either","val either: Either<L, R>","it.czerwinski.kotlin.util.RightProjection.either"]},{"name":"val exception: Throwable","description":"it.czerwinski.kotlin.util.Failure.exception","location":"kotlin-util/it.czerwinski.kotlin.util/-failure/exception.html","searchKeys":["exception","val exception: Throwable","it.czerwinski.kotlin.util.Failure.exception"]},{"name":"val isDefined: Boolean","description":"it.czerwinski.kotlin.util.Option.isDefined","location":"kotlin-util/it.czerwinski.kotlin.util/-option/is-defined.html","searchKeys":["isDefined","val isDefined: Boolean","it.czerwinski.kotlin.util.Option.isDefined"]},{"name":"val isNotEmpty: Boolean","description":"it.czerwinski.kotlin.util.Option.isNotEmpty","location":"kotlin-util/it.czerwinski.kotlin.util/-option/is-not-empty.html","searchKeys":["isNotEmpty","val isNotEmpty: Boolean","it.czerwinski.kotlin.util.Option.isNotEmpty"]},{"name":"val left: LeftProjection<L, R>","description":"it.czerwinski.kotlin.util.Either.left","location":"kotlin-util/it.czerwinski.kotlin.util/-either/left.html","searchKeys":["left","val left: LeftProjection<L, R>","it.czerwinski.kotlin.util.Either.left"]},{"name":"val right: RightProjection<L, R>","description":"it.czerwinski.kotlin.util.Either.right","location":"kotlin-util/it.czerwinski.kotlin.util/-either/right.html","searchKeys":["right","val right: RightProjection<L, R>","it.czerwinski.kotlin.util.Either.right"]},{"name":"val value: L","description":"it.czerwinski.kotlin.util.Left.value","location":"kotlin-util/it.czerwinski.kotlin.util/-left/value.html","searchKeys":["value","val value: L","it.czerwinski.kotlin.util.Left.value"]},{"name":"val value: R","description":"it.czerwinski.kotlin.util.Right.value","location":"kotlin-util/it.czerwinski.kotlin.util/-right/value.html","searchKeys":["value","val value: R","it.czerwinski.kotlin.util.Right.value"]},{"name":"val value: T","description":"it.czerwinski.kotlin.util.Some.value","location":"kotlin-util/it.czerwinski.kotlin.util/-some/value.html","searchKeys":["value","val value: T","it.czerwinski.kotlin.util.Some.value"]},{"name":"val value: T","description":"it.czerwinski.kotlin.util.Success.value","location":"kotlin-util/it.czerwinski.kotlin.util/-success/value.html","searchKeys":["value","val value: T","it.czerwinski.kotlin.util.Success.value"]}]
